const router = require('express').Router();
const uuid = require("uuid").v1;
var fs = require('fs');

// GET request to get all notes saved in db.json
router.get('/notes', (req, res) => {
    // Reads db.json file to get all the notes
    fs.readFile('db/db.json', 'utf8', (err, data) => {
        if (err) res.status(500).json(err); // return 500 if there is an error
        var notes = JSON.parse(data);
        res.json(notes); // return all notes in file
    });
});

// POST call to add a new note
router.post('/notes', (req, res) => {
    const { title, text } = req.body;
    // new note to add to file
    const newNote = { title, text, id: uuid() };

    fs.readFile('db/db.json', 'utf8', (err, data) => {
        if (err) res.status(500).json(err);
        var notes = JSON.parse(data);
        // Push new notes to notes array
        notes.push(newNote);

        var jsonNotes = JSON.stringify(notes, '\t');
        // update db file with newly updated notes array
        fs.writeFile('db/db.json', jsonNotes, err => {
            if (err) res.status(500).json(err);
            res.json(newNote); // return new note object
        });
    });
});

// BONUS: DELETE call to delete a note with specific id
router.delete('/notes/:id', function (req, res) {
    fs.readFile('db/db.json', 'utf8', (err, data) => {
        if (err) res.status(500).json(err);
        var notes = JSON.parse(data);
        // Filter out the note that has the matching id
        var deletedNote = notes.filter(note => note.id === req.params.id);
        // Get index of the note in the notes array
        var deletedNoteIndex = notes.indexOf(deletedNote[0]);
        // Remove one element in index
        notes.splice(deletedNoteIndex, 1);

        var jsonNotes = JSON.stringify(notes, '\t');
        // update db file with newly updated notes array
        fs.writeFile('db/db.json', jsonNotes, err => {
            if (err) res.status(500).json(err);
            res.json('Note is deleted');
        });
    });
});

module.exports = router;